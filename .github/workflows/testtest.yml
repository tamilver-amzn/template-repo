name: module-repository-creaion

on:
  workflow_dispatch:
    inputs:
      organization_name:
        description: 'Organization name (marvel/spgi)'
        required: true
        type: choice
        options:
          - marvel
          - spgi
      Iac:
        description: 'Infrastructure as Code tool (terraform/cdk)'
        required: true
        type: choice
        options:
          - terraform
          - cdk
          - cloudformation
      provider:
        description: 'Cloud provider (aws/azure/google)'
        required: true
        type: choice
        options:
          - aws
          - azure
          - google
      resource:
        description: 'Resource name'
        required: true
        type: string
      new_repo_description:
        description: 'Description of the new repository'
        required: false
        default: ''
      visibility:
        description: 'Repository visibility (public/private/internal)'
        required: true
        default: 'private'
        type: choice
        options:
          - public
          - private
          - internal

jobs:
  create_repo:
    runs-on: ubuntu-latest
    steps:
    - name: List and select template repository
      id: select_template
      env:
        GH_TOKEN: ${{ secrets.REPO_CREATION_TOKEN }}
      run: |
        echo "Fetching template repositories..."
        response=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/${{ github.repository_owner }}/repos?type=template)
        
        if [ $? -ne 0 ]; then
          echo "Error: Failed to fetch repositories"
          exit 1
        fi
        
        templates=$(echo "$response" | jq -r '.[] | select(.is_template == true) | .name')
        
        if [ -z "$templates" ]; then
          echo "Error: No template repositories found"
          exit 1
        fi
        
        echo "Available templates:"
        echo "$templates"
        echo "Please enter the name of the template repository you want to use:"
        read template_repo
        
        if ! echo "$templates" | grep -q "^$template_repo$"; then
          echo "Error: Invalid template repository name"
          exit 1
        fi

        echo "selected_template=$template_repo" >> $GITHUB_OUTPUT

    - name: Select template repository
      id: select_template
      run: |
        IFS=$'\n' read -d '' -r -a templates <<< "${{ steps.list_templates.outputs.template_list }}"
        if [ ${#templates[@]} -eq 0 ]; then
          echo "No template repositories found."
          exit 1
        fi
        echo "Please select a template repository:"
        select template in "${templates[@]}"; do
          if [ -n "$template" ]; then
            echo "selected_template=$template" >> $GITHUB_OUTPUT
            break
          fi
        done

    - name: Generate repository name
      id: generate_name
      run: |
        new_repo_name="${{ github.event.inputs.organization_name }}-${{ github.event.inputs.Iac }}-${{ github.event.inputs.provider }}-module-${{ github.event.inputs.resource }}"
        echo "new_repo_name=${new_repo_name}" >> $GITHUB_OUTPUT
    
    - name: Create repository from template
      env:
        GH_TOKEN: ${{ secrets.REPO_CREATION_TOKEN }}
      run: |
        gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository_owner }}/${{ steps.select_template.outputs.selected_template }}/generate \
          -f owner="${{ github.repository_owner }}" \
          -f name="${{ steps.generate_name.outputs.new_repo_name }}" \
          -f description="${{ github.event.inputs.new_repo_description }}" \
          -F private=${{ github.event.inputs.visibility == 'private' }} \
          -F include_all_branches=false
